#+TITLE: Emacs config file

* Resources
** http://www.wisdomandwonder.com/wordpress/wp-content/uploads/2014/03/C3F.html
** https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
* Config
  :PROPERTIES:
  :CUSTOM_ID: config
  :END:
** Display
*** No menu bar

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
#+END_SRC

*** Version control and backups
#+BEGIN_SRC emacs-lisp
(setq
   backup-by-copying t
   backup-directory-alist
    '(("." . "~/.emacs.d/backups"))
)
#+END_SRC

*** No blinking cursor

Unfortunately, it's possible for the terminal to make it blink anyway.
#+BEGIN_SRC emacs-lisp
(blink-cursor-mode (- (*) (*) (*)))
(setq visible-cursor nil)
#+END_SRC

*** No tabs

Ever, if I ruled the world.
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
#+END_SRC

*** Require a final newline on files

#+BEGIN_SRC emacs-lisp
(setq require-final-newline t)
#+END_SRC

*** Make parent directory automatically

#+BEGIN_SRC emacs-lisp
(defun make-parent-directory ()
  "Make sure the directory of `buffer-file-name' exists."
  (make-directory (file-name-directory buffer-file-name) t))

(add-hook 'find-file-not-found-functions #'make-parent-directory)
#+END_SRC

*** Zenburn by default

#+BEGIN_SRC emacs-lisp
(use-package
 zenburn-theme
 :ensure t
 )
(load-theme 'zenburn t)
#+END_SRC

*** UTF-8

#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

** Org-mode

*** Show links raw
#+BEGIN_SRC emacs-lisp
(setq org-descriptive-links nil)
#+END_SRC

*** Use faux-tex super/subscripts
#+BEGIN_SRC emacs-lisp
(setq org-use-sub-superscripts '{})
(setq org-export-with-sub-superscripts '{})
#+END_SRC

*** Show expanded
#+BEGIN_SRC emacs-lisp
(setq org-startup-folded nil)
#+END_SRC

*** Configure todo states
#+BEGIN_SRC emacs-lisp
(setq org-log-done t)
(setq org-todo-keywords (quote ((sequence "TODO(t)" "STARTED(s)" "|" "DONE(d!)" )
                               (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "TESTING(T)" "|" "CANCELLED(c@/!)" ))))
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

*** Simple capture setup
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/notes.org"))
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

*** Load modules
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-habit)
#+END_SRC

*** Fontify inline
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

*** Set up babel languages
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
    '(
        (shell . t)
        (python . t)
    )
)
#+END_SRC

** Package stuffs

*** Set up use-package independently
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(setq use-package-verbose t)
(require 'use-package)
(use-package auto-compile
  :ensure t
  :config (auto-compile-on-load-mode))
(unless (package-installed-p 'auto-complete)
  (package-install 'auto-complete))
(require 'auto-complete)
#+END_SRC
*** Packages
**** Flycheck

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode)
  (setq flycheck-shellcheck-follow-sources nil))
#+END_SRC

**** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :commands (magit-init
             magit-status
             magit-diff
             magit-commit)
  :bind (("C-x g" . magit-status)))
#+END_SRC

**** Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :bind ("C-c p 1" . projectile-command-map)
  :config
(projectile-global-mode +1))
#+END_SRC

*** Languages

**** Simple mode associations

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode "\\.md$")
(use-package json-mode
  :mode "\\.json$")
(use-package dockerfile-mode
  :mode "^Dockerfile$")
(use-package lua-mode
  :mode "\\.lua$")
(use-package toml-mode
  :mode "\\.toml$")
(use-package systemd-mode
  :mode "\\.(service|mount|socket)$")
(use-package ruby-mode
  :mode "\\.rb$")
(use-package adoc-mode
  :mode "\\.adoc$")
#+END_SRC

**** Python

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :defer t
  :init
  (advice-add 'python-mode :before 'elpy-enable)
(setq elpy-rpc-python-command "python3")
(setq python-shell-interpreter "python3"
      python-shell-interpreter-args "-i"))
#+END_SRC


**** YAML

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml$")
(setq flycheck-checker 'yaml-yamllint)
#+END_SRC

**** Shell

#+BEGIN_SRC emacs-lisp
;; Change shell indentation to personal preference
(add-hook 'sh-mode-hook (lambda () (setq sh-basic-offset 2 sh-indentation 2)))
#+END_SRC

**** Coffeescript

#+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode "\\.coffee$"
  :init (custom-set-variables '(coffee-tab-width 2)))
#+END_SRC

**** reST

#+BEGIN_SRC emacs-lisp
(use-package rst-mode
  :mode "\\.rst$"
  :init (custom-set-variables
          '(rst-indent-comment 4)
          '(rst-indent-field 4)
          '(rst-indent-literal-minimized 3)
          '(rst-indent-literal-normal 4)
          '(rst-indent-width 4)
         ))
#+END_SRC

**** HTML

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode "\\.html$"
  :bind (("C-c /" . web-mode-element-close))
  :init
  (progn (setq web-mode-code-indent-offset 2)
         (setq web-mode-markup-indent-offset 2)
         (setq web-mode-css-indent-offset 2)
         (setq web-mode-enable-engine-detection t)))
#+END_SRC

** General configuration
*** Re-open as sudo

#+BEGIN_SRC emacs-lisp
(defun sudo-edit (&optional arg)
  "Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file."
  (interactive "P")
  (if (or arg (not buffer-file-name))
      (find-file (concat "/sudo:root@localhost:"
                         (ido-read-file-name "Find file(as root): ")))
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+END_SRC

*** Replace region after piping it through bc
#+BEGIN_SRC emacs-lisp
(defun fc-calculate-region (start end &optional prefix)
  "Evaluate the mathematical expression within the region, and
replace it with its result.

With a prefix arg, do not replace the region, but instead put the
result into the kill ring."
  (interactive "r\nP")
  (let* ((expr (buffer-substring start end))
         (result (fc-bc-calculate-expression expr))
         (ends-with-newline (string-match "\n$" expr)))
    (if prefix
        (progn
          (kill-new result)
          (message "%s" result))
      (delete-region start end)
      (insert result)
      (when ends-with-newline
        (insert "\n")))))

(defun fc-bc-calculate-expression (expr)
  "Evaluate `expr' as a mathematical expression, and return its result.

This actually pipes `expr' through bc(1), replacing newlines with
spaces first. If bc(1) encounters an error, an error is
signalled."
  (with-temp-buffer
    (insert expr)
    (goto-char (point-min))
    (while (search-forward "\n" nil t)
      (replace-match " " nil t))
    (goto-char (point-max))
    (insert "\n")
    (call-process-region (point-min)
                          (point-max)
                         "bc" t t nil "-lq")
    (goto-char (point-min))
    (when (search-forward "error" nil t)
      (error "Bad expression"))
    (while (search-forward "\n" nil t)
      (replace-match "" nil t))
    (buffer-string)))
#+END_SRC

*** Bind keys
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-r") 'sudo-edit)
(global-set-key (kbd "C-c m") 'fc-calculate-region)
(global-set-key (kbd "<f7>") 'compile)
#+END_SRC
*** Follow symlinks in version control
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
*** Allow upcase region, I'm a smart enough fella
#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC
*** Use bash for TRAMP
#+BEGIN_SRC emacs-lisp
(eval-after-load 'tramp '(setenv "SHELL" "/bin/bash"))
#+END_SRC
** E-mail
#+BEGIN_SRC emacs-lisp
(use-package mu4e
  :commands (mu4e))
;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

(setq mu4e-drafts-folder "/[Gmail].Drafts")
(setq mu4e-sent-folder   "/[Gmail].Sent Mail")
(setq mu4e-trash-folder  "/[Gmail].Trash")

;; setup some handy shortcuts
;; you can quickly switch to your Inbox -- press ``ji''
;; then, when you want archive some messages, move them to
;; the 'All Mail' folder by pressing ``ma''.
(setq mu4e-maildir-shortcuts
    '( ("/INBOX"               . ?i)
       ("/[Gmail].Sent Mail"   . ?s)
       ("/[Gmail].Trash"       . ?t)
       ("/[Gmail].All Mail"    . ?a)))

;; allow for updating mail using 'U' in the main view:
(setq mu4e-get-mail-command "offlineimap")

;; ref: http://emacs.readthedocs.io/en/latest/mu4e__email_client.html
;; ref: http://emacs.stackexchange.com/questions/3051/how-can-i-use-eww-as-a-renderer-for-mu4e
(defun my-render-html-message ()
  (let ((dom (libxml-parse-html-region (point-min) (point-max))))
    (erase-buffer)
    (shr-insert-document dom)
    (goto-char (point-min))))
(setq mu4e-html2text-command 'my-render-html-message)
;; endref

;; give me ISO(ish) format date-time stamps in the header list
(setq  mu4e-headers-date-format "%Y-%m-%d %H:%M")
;; endref
#+END_SRC

** Shortcuts

* Import the config
<<config>>
